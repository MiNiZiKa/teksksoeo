import asyncio
import random
from datetime import datetime, timedelta

from telethon.tl.types import Message

from .. import loader


@loader.tds
class krmkMod(loader.Module):
    """krmk"""

    strings = {"name": "krmk"}

    async def client_ready(self, client, db):
        """ready"""
        self.db = db
        self.client = client
        self.me = await client.get_me()
        self.thr = db.get("Thr", "thr", {})
        self.thr.setdefault("min", 5)
        self.thr.setdefault("cod", "–£ –∫–æ–≥–æ –µ—Å—Ç—å C6 –ê—è–∫–∞?")
        self.next_send_time = {}
        self.main_channel = self.thr.get("main", None)

    async def red(self, iid):
        """add or remove id"""
        if "chats" in self.thr and iid in self.thr["chats"]:
            self.thr["chats"].remove(iid)
            txt = f"<code>{iid}</code><b> —É–¥–∞–ª–µ–Ω</b>"
            if not self.thr["chats"]:
                self.thr.pop("chats")
        elif "chats" in self.thr:
            txt = f"<code>{iid}</code><b> –¥–æ–±–∞–≤–ª–µ–Ω</b>"
            self.thr["chats"].append(iid)
        else:
            self.thr.setdefault("chats", [iid])
            txt = f"<code>{iid}</code><b> –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Thr", "thr", self.thr)
        return txt

    async def thccmd(self, m):
        """–∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"""
        if len(m.text) < 5:
            return await m.edit(f"–§—Ä–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{self.thr['cod']}</code>")
        cmn = m.text.split(" ", 1)[1]
        self.thr["cod"] = cmn
        self.db.set("Thr", "thr", self.thr)
        await m.edit(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: <code>{cmn}</code>")

    async def thtcmd(self, m):
        """–∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        if len(m.text) < 5:
            return await m.edit(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–µ {self.thr['min']} –º–∏–Ω—É—Ç")
        cmn = m.text.split(" ", 1)[1]
        if not 0 < int(cmn) < 60:
            return await m.edit("–í–≤–µ–¥–∏—Ç–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 1 - 59")
        self.thr["min"] = int(cmn)
        self.db.set("Thr", "thr", self.thr)
        await m.edit(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ {cmn} –º–∏–Ω—É—Ç")

    async def thrcmd(self, m):
        r"""—Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        —É–∫–∞–∂–∏—Ç–µ –æ—Ç–∫—É–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ .thr main id"""
        if len(m.text) < 5:
            txt = "–ì–ª–∞–≤–Ω—ã–π: "
            if "main" not in self.thr:
                txt += "–Ω–µ –∑–∞–¥–∞–Ω\n\n–°–ø–∏—Å–æ–∫:"
            else:
                txt += f'<code>{self.thr["main"]}</code>\n\n–°–ø–∏—Å–æ–∫:'
            if "chats" not in self.thr:
                txt += "\n –ü—É—Å—Ç–æ"
            else:
                for i in self.thr["chats"]:
                    txt += f"\n<code>{i}</code>"
            return await m.edit(txt)
        if "del" in m.text:
            self.thr.clear()
            self.db.set("Thr", "thr", self.thr)
            self.main_channel = None
            return await m.edit("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω")
        cmn = m.text.split(" ", 2)[1]
        if cmn == "main":
            iid = int(m.text.split(" ", 2)[2])
            self.thr["main"] = iid
            self.db.set("Thr", "thr", self.thr)
            self.main_channel = iid
            txt = f"ü§ôüèæ –ì–ª–∞–≤–Ω—ã–π: <code>{iid}</code>"
            return await m.edit(txt)
        iid = int(cmn)
        await m.edit(await self.red(iid))

    async def watcher(self, m: Message):
        """–∞–ª–∫–æ"""
        if not hasattr(m, "text") or not isinstance(m, Message):
            return
        if self.thr["cod"] in m.text and m.sender_id == self.me.id:
            iid = m.chat_id
            await self.client.send_message("me", await self.red(iid))
        if "chats" not in self.thr or m.chat_id not in self.thr["chats"] or m.sender_id == self.me.id:
            return
        current_time = datetime.now()
        next_time = self.next_send_time.get(m.chat_id, current_time)
        if current_time < next_time:
            return
        self.next_send_time[m.chat_id] = current_time + timedelta(minutes=self.thr["min"])
        try:
            p = await self.client.get_messages(self.main_channel, limit=100)
        except Exception:
            return
        if p.total < 2:
            return
        p = p[random.randint(0, p.total - 2)]
        cc = [m.chat_id] if random.randint(0, 42) != 3 else self.thr["chats"]
        for i in cc:
            await asyncio.sleep(random.randint(1, 5))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            try:
                if p.media:
                    await self.client.send_file(i, p, caption=p.text)
                else:
                    await self.client.send_message(i, p.text)
            except Exception:
                continue
